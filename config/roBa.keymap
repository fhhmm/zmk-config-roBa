#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <10 11>;
        };

        undo {
            bindings = <&kp LG(Z)>;
            key-positions = <23 24>;
        };

        redo {
            bindings = <&kp LG(LS(Z))>;
            key-positions = <23 22>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q               &kp W         &kp E             &kp R            &kp T                                               &kp Y        &kp U  &kp I      &kp O    &kp P
&mt LEFT_CONTROL A  &kp S         &kp D             &kp F            &kp G        &kp LS(LG(LC(N4)))      &kp MINUS      &kp H        &kp J  &kp K      &kp L    &lt 5 SQT
&mt LEFT_SHIFT Z    &kp X         &kp C             &kp V            &kp B        &kp EQUAL               &kp SEMICOLON  &kp N        &kp M  &kp COMMA  &kp DOT  &lt 3 SLASH
&lt 6 ESCAPE        &kp LEFT_ALT  &kp LEFT_COMMAND  &lt 4 LC(SPACE)  &lt 2 SPACE  &kp SPACE               &kp BACKSPACE  &lt 1 ENTER                             &kp GRAVE
            >;

            sensor-bindings = <&inc_dec_kp C_AC_ZOOM_IN C_AC_ZOOM_OUT>;
        };

        FUNCTION {
            bindings = <
&kp TAB           &kp LG(LS(N5))        &kp LG(LC(LS(N5)))        &kp LG(LS(LEFT_BRACKET))    &kp LG(LS(RIGHT_BRACKET))                                    &kp F1  &kp F2  &kp F3  &kp F4  &kp F5
&kp LEFT_CONTROL  &kp LG(LS(NUMBER_4))  &kp LS(LC(LG(NUMBER_4)))  &kp LG(LA(LEFT_ARROW))      &kp LG(LA(RIGHT_ARROW))      &trans                 &kp F13  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&kp LEFT_SHIFT    &trans                &trans                    &kp LG(LA(LS(LEFT_ARROW)))  &kp LG(LA(LS(RIGHT_ARROW)))  &kp LG(LA(ENTER))      &trans   &trans  &trans  &trans  &trans  &kp F11
&trans            &trans                &trans                    &trans                      &kp SPACE                    &trans                 &trans   &trans                          &kp F12
            >;

            sensor-bindings = <&inc_dec_kp PAGE_DOWN PAGE_UP>;
        };

        NUM {
            bindings = <
&kp N1            &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                      &kp NUMBER_6      &kp N7             &kp N8            &kp N9             &kp N0
&kp LEFT_CONTROL  &trans        &trans        &trans        &trans  &trans      &trans  &kp MINUS         &kp PLUS           &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH
&kp LEFT_SHIFT    &trans        &trans        &trans        &trans  &trans      &trans  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp COMMA         &kp PERIOD         &kp SLASH
&trans            &trans        &trans        &trans        &trans  &trans      &trans  &trans                                                                    &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &trans                  &kp LS(UP_ARROW)    &trans                   &trans                                                 &kp UP_ARROW    &kp UP_ARROW    &kp UP_ARROW     &trans  &trans
&kp HOME        &kp LS(LEFT_ARROW)      &kp LS(DOWN_ARROW)  &kp LS(RIGHT_ARROW)      &kp END       &trans                &trans             &kp LEFT_ARROW  &kp LEFT_ARROW  &kp RIGHT_ARROW  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans              &kp LG(LS(RIGHT_ARROW))  &trans        &trans                &trans             &kp DOWN_ARROW  &kp DOWN_ARROW  &kp DOWN_ARROW   &trans  &trans
&trans          &trans                  &trans              &kp LEFT_SHIFT           &kp LEFT_ALT  &kp LEFT_COMMAND      &kp RIGHT_COMMAND  &kp RIGHT_ALT                                            &trans
            >;

            sensor-bindings = <&inc_dec_kp PAGE_DOWN PAGE_UP>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans          &trans                                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans          &trans        &trans                &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans          &trans        &trans                &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &kp LEFT_SHIFT  &kp LEFT_ALT  &kp LEFT_COMMAND      &trans  &trans                                &trans
            >;

            sensor-bindings = <&inc_dec_kp PAGE_DOWN PAGE_UP>;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans             &trans                               &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans  &trans  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &trans      &trans  &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans             &trans           &trans      &trans  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans  &trans  &trans             &trans           &trans      &trans  &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
